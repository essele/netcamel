#!/usr/bin/luajit
--------------------------------------------------------------------------------
--  This file is part of NetCamel
--  Copyright (C) 2014,2015 Lee Essen <lee.essen@nowonline.co.uk>
--
--  This program is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.
------------------------------------------------------------------------------

--
-- This script is called by udhcpc when a lease is granted, fails or is renewed.
--
-- The role of this script is to configure the interface, setup the default
-- route and configure the resolvers.
--
dofile("/netcamel/lib/lib.lua")

--
-- We need to access the database
--
--runtime = require("runtime")

--
-- For string split and each
--
--require("utils")
--require("log")

--
-- Pull out all of the environment variables
--
local interface 		= os.getenv("interface")
local ip				= os.getenv("ip")
local mask				= os.getenv("mask")
local broadcast 		= os.getenv("broadcast") or "+"
local routers 			= lib.utils.split(os.getenv("router") or "", "%s")
local dns 				= lib.utils.split(os.getenv("dns") or "", "%s")

--
-- Load the extra variables and work out the action
--
local vars = lib.runtime.get_vars("dhcp."..interface)
local action 			= arg[1]

--
-- Redirect our output to make sure we capture even the
-- cleanup
--
if vars.logfile then lib.runtime.redirect(vars.logfile) end

--
-- Block any other route/interface activity so we have a clear run and
-- our logs are easier to read
--
lib.runtime.block_on()

--
-- Remove anything stored from this interface so we are starting clean
--
lib.log.root("intf", interface, "dhcp")
lib.log.log("info", "DHCP event action=%s", action)

if action == "deconfig" then
	--
	-- Deconfig means clear out the interface ready to start
	-- or when finishing.
	--
	lib.runtime.execute("/sbin/ip", { "link", "set", interface, "up" })
	lib.runtime.execute("/sbin/ip", { "addr", "flush", "dev", interface })

	--
	-- Remove any routes and resolvers and work out what the
	-- end state should look like
	--
	lib.runtime.interface_down(interface, vars)
end

if action == "leasefail" or action == "nak" then
end

if action == "renew" or action == "bound" then
	--
	-- Configure the interface
	--
	lib.runtime.execute("/sbin/ip", { "addr", "flush", "dev", interface })
	lib.runtime.execute("/sbin/ip", { "addr", "add", ip.."/"..mask, "broadcast", broadcast, "dev", interface })

	--
	-- Add routes and resolvers and work out what the
	-- end state should look like
	--
	lib.runtime.interface_up(interface, dns, routers[1], vars)
end

--
-- Clear the block (will happen at exit anyway)
--
lib.runtime.block_off()

os.exit(0)
